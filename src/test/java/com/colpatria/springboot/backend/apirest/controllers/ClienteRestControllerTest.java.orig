package com.colpatria.springboot.backend.apirest.controllers;

import static org.hamcrest.Matchers.hasSize;
import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
<<<<<<< HEAD
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.context.WebApplicationContext;

import com.colpatria.springboot.backend.apirest.SpringBootBackendApirestApplication;
import com.colpatria.springboot.backend.apirest.models.entity.Cliente;
import com.colpatria.springboot.backend.apirest.testdatabuilder.ClienteTestDataBuilder;
import com.colpatria.springboot.backend.apirest.utils.ToolsUtils;
=======
import org.springframework.web.context.WebApplicationContext;

import com.colpatria.springboot.backend.apirest.SpringBootBackendApirestApplication;
import com.colpatria.springboot.backend.apirest.util.TokenGenerator;
>>>>>>> 10d020fc94763c1b02cb99ea1be60a761e620c28

@RunWith(SpringRunner.class)
@SpringBootTest(classes = SpringBootBackendApirestApplication.class)
@AutoConfigureMockMvc
@TestPropertySource(locations = "classpath:applicationtest.properties")
public class ClienteRestControllerTest {

	@Autowired
	private WebApplicationContext context;
	private MockMvc mvc;
<<<<<<< HEAD
	private ToolsUtils toolsUtils;
=======
>>>>>>> 10d020fc94763c1b02cb99ea1be60a761e620c28

	private String TOKEN = "";
	private static final String CONTENT_TYPE = "application/json;charset=UTF-8";

	@Before
	public void setup() throws Exception {
		mvc = MockMvcBuilders.webAppContextSetup(context).apply(springSecurity()).build();
<<<<<<< HEAD
		TOKEN = this.obtainAccessToken("admin", "12345");
		this.toolsUtils = new ToolsUtils();
	}

	private String obtainAccessToken(String username, String password) throws Exception {
		final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
		params.add("grant_type", "password");
		params.add("client_id", CLIENT_ID);
		params.add("username", username);
		params.add("password", password);

		// @formatter:off

		ResultActions result = mvc
				.perform(post("/oauth/token").params(params).with(httpBasic(CLIENT_ID, CLIENT_SECRET))
						.accept(CONTENT_TYPE))
				.andExpect(status().isOk()).andExpect(content().contentType(CONTENT_TYPE));

		String resultString = result.andReturn().getResponse().getContentAsString();

		JacksonJsonParser jsonParser = new JacksonJsonParser();
		return jsonParser.parseMap(resultString).get("access_token").toString();
	}

=======
		TOKEN = TokenGenerator.obtainAccessToken("admin", "12345", mvc);
	}

>>>>>>> 10d020fc94763c1b02cb99ea1be60a761e620c28
	@Test
	public void given_clientes_without_token() throws Exception {
		mvc.perform(get("/clientes")).andExpect(status().isUnauthorized());
	}

	@Test
	public void given_clientes_ok() throws Exception {
<<<<<<< HEAD

		// @formatter:off
		mvc.perform(get("/api/clientes").header("Authorization", "Bearer " + TOKEN).contentType(CONTENT_TYPE)
				.accept(CONTENT_TYPE)).andDo(print()).andExpect(jsonPath("$", hasSize(12))).andExpect(status().isOk());
	}

	@Test
	public void given_clientes_by_Id() throws Exception {

		// @formatter:off
		mvc.perform(get("/api/clientes/2").header("Authorization", "Bearer " + TOKEN).contentType(CONTENT_TYPE)
				.accept(CONTENT_TYPE)).andDo(print()).andExpect(jsonPath("$.nombre", is("Mr. John"))).andExpect(status().isOk());
	}

	@Test
	public void given_clientes_by_Id_404() throws Exception {

		// @formatter:off
		mvc.perform(get("clientes/1").header("Authorization", "Bearer " + TOKEN).contentType(CONTENT_TYPE)
				.accept(CONTENT_TYPE)).andDo(print()).andExpect(status().is(404));
	}

	@Test
	public void given_clientes_by_Id_unauthorized() throws Exception {

		// @formatter:off
		mvc.perform(get("/api/clientes/1").contentType(CONTENT_TYPE).accept(CONTENT_TYPE)).andDo(print())
				.andExpect(status().is(401));
	}

	@Test
	public void given_clientes_by_Id_Post_ok() throws Exception {

		// Arrange
		Cliente cliente = new ClienteTestDataBuilder().withId(18L).withNombre("David").withApellido("Sandoval")
				.withEmail("david.sandoval@ceiba.com.com").build();
		// Act and Assert
		// @formatter:off
		mvc.perform(put("/api/clientes/1").header("Authorization", "Bearer " + TOKEN).contentType(CONTENT_TYPE)
				.content(toolsUtils.asJsonString(cliente)).accept(CONTENT_TYPE)).andDo(print())
				.andExpect(status().isOk());
	}
=======
		mvc.perform(get("/api/clientes").header("Authorization", "Bearer " + TOKEN).contentType(CONTENT_TYPE)
				.accept(CONTENT_TYPE)).andDo(print()).andExpect(jsonPath("$", hasSize(12))).andExpect(status().isOk());
	}
>>>>>>> 10d020fc94763c1b02cb99ea1be60a761e620c28
}
